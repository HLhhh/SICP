#lang sicp
(define (* a b)
  (define (*-iter a b c)
    (cond ((= b 0) 0)
          ((= b 1) (+ a c))
          ((even? b) (*-iter (double a) (halve b) c))
          (else (*-iter a (- b 1) (+ c a)))
    ))
  (*-iter a b 0)
  )

(define (even? n)
  (= (remainder n 2) 0))
(define (double x)
  (+ x x))
(define (halve x)
  (/ x 2))